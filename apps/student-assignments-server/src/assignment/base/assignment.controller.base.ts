/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssignmentService } from "../assignment.service";
import { AssignmentCreateInput } from "./AssignmentCreateInput";
import { Assignment } from "./Assignment";
import { AssignmentFindManyArgs } from "./AssignmentFindManyArgs";
import { AssignmentWhereUniqueInput } from "./AssignmentWhereUniqueInput";
import { AssignmentUpdateInput } from "./AssignmentUpdateInput";
import { SubmissionFindManyArgs } from "../../submission/base/SubmissionFindManyArgs";
import { Submission } from "../../submission/base/Submission";
import { SubmissionWhereUniqueInput } from "../../submission/base/SubmissionWhereUniqueInput";

export class AssignmentControllerBase {
  constructor(protected readonly service: AssignmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Assignment })
  async createAssignment(
    @common.Body() data: AssignmentCreateInput
  ): Promise<Assignment> {
    return await this.service.createAssignment({
      data: data,
      select: {
        createdAt: true,
        description: true,
        dueDate: true,
        id: true,
        teacher: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Assignment] })
  @ApiNestedQuery(AssignmentFindManyArgs)
  async assignments(@common.Req() request: Request): Promise<Assignment[]> {
    const args = plainToClass(AssignmentFindManyArgs, request.query);
    return this.service.assignments({
      ...args,
      select: {
        createdAt: true,
        description: true,
        dueDate: true,
        id: true,
        teacher: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Assignment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assignment(
    @common.Param() params: AssignmentWhereUniqueInput
  ): Promise<Assignment | null> {
    const result = await this.service.assignment({
      where: params,
      select: {
        createdAt: true,
        description: true,
        dueDate: true,
        id: true,
        teacher: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Assignment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssignment(
    @common.Param() params: AssignmentWhereUniqueInput,
    @common.Body() data: AssignmentUpdateInput
  ): Promise<Assignment | null> {
    try {
      return await this.service.updateAssignment({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          dueDate: true,
          id: true,
          teacher: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Assignment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssignment(
    @common.Param() params: AssignmentWhereUniqueInput
  ): Promise<Assignment | null> {
    try {
      return await this.service.deleteAssignment({
        where: params,
        select: {
          createdAt: true,
          description: true,
          dueDate: true,
          id: true,
          teacher: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/submissions")
  @ApiNestedQuery(SubmissionFindManyArgs)
  async findSubmissions(
    @common.Req() request: Request,
    @common.Param() params: AssignmentWhereUniqueInput
  ): Promise<Submission[]> {
    const query = plainToClass(SubmissionFindManyArgs, request.query);
    const results = await this.service.findSubmissions(params.id, {
      ...query,
      select: {
        assignment: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        student: true,
        submissionDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/submissions")
  async connectSubmissions(
    @common.Param() params: AssignmentWhereUniqueInput,
    @common.Body() body: SubmissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      submissions: {
        connect: body,
      },
    };
    await this.service.updateAssignment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/submissions")
  async updateSubmissions(
    @common.Param() params: AssignmentWhereUniqueInput,
    @common.Body() body: SubmissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      submissions: {
        set: body,
      },
    };
    await this.service.updateAssignment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/submissions")
  async disconnectSubmissions(
    @common.Param() params: AssignmentWhereUniqueInput,
    @common.Body() body: SubmissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      submissions: {
        disconnect: body,
      },
    };
    await this.service.updateAssignment({
      where: params,
      data,
      select: { id: true },
    });
  }
}
