/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GradeService } from "../grade.service";
import { GradeCreateInput } from "./GradeCreateInput";
import { Grade } from "./Grade";
import { GradeFindManyArgs } from "./GradeFindManyArgs";
import { GradeWhereUniqueInput } from "./GradeWhereUniqueInput";
import { GradeUpdateInput } from "./GradeUpdateInput";

export class GradeControllerBase {
  constructor(protected readonly service: GradeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Grade })
  async createGrade(@common.Body() data: GradeCreateInput): Promise<Grade> {
    return await this.service.createGrade({
      data: {
        ...data,

        submission: data.submission
          ? {
              connect: data.submission,
            }
          : undefined,
      },
      select: {
        comments: true,
        createdAt: true,
        grade: true,
        id: true,

        submission: {
          select: {
            id: true,
          },
        },

        teacher: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Grade] })
  @ApiNestedQuery(GradeFindManyArgs)
  async grades(@common.Req() request: Request): Promise<Grade[]> {
    const args = plainToClass(GradeFindManyArgs, request.query);
    return this.service.grades({
      ...args,
      select: {
        comments: true,
        createdAt: true,
        grade: true,
        id: true,

        submission: {
          select: {
            id: true,
          },
        },

        teacher: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Grade })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async grade(
    @common.Param() params: GradeWhereUniqueInput
  ): Promise<Grade | null> {
    const result = await this.service.grade({
      where: params,
      select: {
        comments: true,
        createdAt: true,
        grade: true,
        id: true,

        submission: {
          select: {
            id: true,
          },
        },

        teacher: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Grade })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGrade(
    @common.Param() params: GradeWhereUniqueInput,
    @common.Body() data: GradeUpdateInput
  ): Promise<Grade | null> {
    try {
      return await this.service.updateGrade({
        where: params,
        data: {
          ...data,

          submission: data.submission
            ? {
                connect: data.submission,
              }
            : undefined,
        },
        select: {
          comments: true,
          createdAt: true,
          grade: true,
          id: true,

          submission: {
            select: {
              id: true,
            },
          },

          teacher: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Grade })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGrade(
    @common.Param() params: GradeWhereUniqueInput
  ): Promise<Grade | null> {
    try {
      return await this.service.deleteGrade({
        where: params,
        select: {
          comments: true,
          createdAt: true,
          grade: true,
          id: true,

          submission: {
            select: {
              id: true,
            },
          },

          teacher: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
